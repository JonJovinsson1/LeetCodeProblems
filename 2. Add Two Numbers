/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        int len1 = getLength(l1);
        int len2 = getLength(l2);

        if (len1 < 5 && len2 < 5) {
            return addShortLists(l1, l2);
        } else {
            if (len1 == 0) return l2;
            if (len2 == 0) return l1;
            return addLongLists(l1, l2);
        }
    }

private:
    int getLength(ListNode* head) {
        int length = 0;
        while (head != nullptr) {
            length++;
            head = head->next;
        }
        return length;
    }

    ListNode* addShortLists(ListNode* l1, ListNode* l2) {
        int carry = 0;
        ListNode* result = nullptr;

        while (l1 != nullptr || l2 != nullptr || carry != 0) {
            int val1 = (l1 != nullptr) ? l1->val : 0;
            int val2 = (l2 != nullptr) ? l2->val : 0;

            int sum = val1 + val2 + carry;
            carry = sum / 10;
            sum = sum % 10;

            ListNode* newNode = new ListNode(sum);
            newNode->next = result;
            result = newNode;

            if (l1 != nullptr) l1 = l1->next;
            if (l2 != nullptr) l2 = l2->next;
        }

        ListNode* reversedResult = nullptr;
        while (result != nullptr) {
            ListNode* temp = result;
            result = result->next;
            temp->next = reversedResult;
            reversedResult = temp;
        }

        return reversedResult;
    }

    ListNode* addLongLists(ListNode* l1, ListNode* l2) {
        ListNode* C = new ListNode(0);
        ListNode* D = C;
        int E = 0;

        while (l1 != nullptr || l2 != nullptr) {
            int F = (l1 != nullptr) ? l1->val : 0;
            int G = (l2 != nullptr) ? l2->val : 0;

            int sum = F + G + E;
            E = sum / 10;
            D->next = new ListNode(sum % 10);
            D = D->next;

            if (l1 != nullptr) l1 = l1->next;
            if (l2 != nullptr) l2 = l2->next;
        }

        if (E > 0) {
            D->next = new ListNode(E);
        }

        return C->next;
    }
};
